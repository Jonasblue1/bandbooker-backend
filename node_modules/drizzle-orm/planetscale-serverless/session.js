"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlanetscaleSession = exports.PlanetScalePreparedQuery = void 0;
const logger_1 = require("../logger");
const session_1 = require("../mysql-core/session");
const sql_1 = require("../sql");
const utils_1 = require("../utils");
class PlanetScalePreparedQuery extends session_1.PreparedQuery {
    constructor(client, queryString, params, logger, fields, name) {
        super();
        this.client = client;
        this.queryString = queryString;
        this.params = params;
        this.logger = logger;
        this.fields = fields;
        this.rawQuery = { as: 'object' };
        this.query = { as: 'array' };
    }
    execute(placeholderValues = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues);
            this.logger.logQuery(this.queryString, params);
            const { fields } = this;
            if (!fields) {
                return this.client.execute(this.queryString, params, this.rawQuery);
            }
            const result = this.client.execute(this.queryString, params, this.query);
            return result.then((eQuery) => eQuery.rows.map((row) => (0, utils_1.mapResultRow)(fields, row, this.joinsNotNullableMap)));
        });
    }
    all(placeholderValues = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues);
            this.logger.logQuery(this.queryString, params);
            return this.client.execute(this.queryString, params, this.rawQuery).then((eQuery) => eQuery.rows);
        });
    }
}
exports.PlanetScalePreparedQuery = PlanetScalePreparedQuery;
class PlanetscaleSession extends session_1.MySqlSession {
    constructor(client, dialect, options = {}) {
        var _a;
        super(dialect);
        this.client = client;
        this.logger = (_a = options.logger) !== null && _a !== void 0 ? _a : new logger_1.NoopLogger();
    }
    prepareQuery(query, fields, name) {
        return new PlanetScalePreparedQuery(this.client, query.sql, query.params, this.logger, fields, name);
    }
    query(query, params) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.logQuery(query, params);
            return yield this.client.execute(query, params, { as: 'array' });
        });
    }
    transaction(queries) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.transaction((tx) => __awaiter(this, void 0, void 0, function* () {
                for (const query of queries) {
                    yield tx.execute(query.sql, query.params);
                }
            }));
        });
    }
    queryObjects(query, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.execute(query, params, { as: 'object' });
        });
    }
}
exports.PlanetscaleSession = PlanetscaleSession;
//# sourceMappingURL=session.js.map