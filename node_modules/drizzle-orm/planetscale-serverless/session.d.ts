import { Connection, ExecutedQuery } from '@planetscale/database';
import { Logger } from '../logger';
import { MySqlDialect } from '../mysql-core/dialect';
import { SelectFieldsOrdered } from '../mysql-core/query-builders/select.types';
import { MySqlSession, PreparedQuery, PreparedQueryConfig, QueryResultHKT } from '../mysql-core/session';
import { Query } from '../sql';
export declare type PExecuteAs = 'array' | 'object';
export declare type PExecuteOptions = {
    as?: PExecuteAs;
};
export declare type PlanetScaleConnection = Connection;
export declare class PlanetScalePreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private queryString;
    private params;
    private logger;
    private fields;
    private rawQuery;
    private query;
    constructor(client: PlanetScaleConnection, queryString: string, params: unknown[], logger: Logger, fields: SelectFieldsOrdered | undefined, name: string | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    all(placeholderValues?: Record<string, unknown> | undefined): Promise<T['all']>;
}
export interface PlanetscaleSessionOptions {
    logger?: Logger;
}
export declare class PlanetscaleSession extends MySqlSession {
    private client;
    private logger;
    constructor(client: PlanetScaleConnection, dialect: MySqlDialect, options?: PlanetscaleSessionOptions);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectFieldsOrdered | undefined, name: string | undefined): PreparedQuery<T>;
    query(query: string, params: unknown[]): Promise<ExecutedQuery>;
    transaction(queries: {
        sql: string;
        params?: any[];
    }[]): Promise<void>;
    queryObjects(query: string, params: unknown[]): Promise<ExecutedQuery>;
}
export interface PlanetscaleQueryResultHKT extends QueryResultHKT {
    type: ExecutedQuery;
}
//# sourceMappingURL=session.d.ts.map