import { GetColumnConfig, GetColumnData, UpdateColConfig } from '../../column';
import { SelectFields as SelectFieldsBase, SelectFieldsFlat as SelectFieldsFlatBase, SelectFieldsOrdered as SelectFieldsOrderedBase } from '../../operations';
import { AnyPgColumn } from '../columns';
import { ChangeColumnTableName, PgColumn } from '../columns/common';
import { AnyPgTable, GetTableConfig, PgTableWithColumns, TableConfig, UpdateTableConfig } from '../table';
import { Placeholder, SQL } from '../../sql';
import { GetSubqueryAlias, GetSubquerySelection, Subquery } from '../../subquery';
import { Assume, DrizzleTypeError, Simplify } from '../../utils';
import { PgSelect } from './select';
export declare type JoinType = 'inner' | 'left' | 'right' | 'full';
export declare type SelectMode = 'partial' | 'single' | 'multiple';
export interface JoinsValue {
    on: SQL | undefined;
    table: AnyPgTable | Subquery;
    joinType: JoinType;
}
export declare type JoinNullability = 'nullable' | 'not-null';
export declare type ApplyNullability<T, TNullability extends JoinNullability> = TNullability extends 'nullable' ? T | null : TNullability extends 'null' ? null : T;
export declare type ApplyNullabilityToColumn<TColumn extends AnyPgColumn, TNullability extends JoinNullability> = TNullability extends 'not-null' ? TColumn : TColumn extends PgColumn<infer TConfig> ? PgColumn<UpdateColConfig<TConfig, {
    notNull: TNullability extends 'nullable' ? false : TConfig['notNull'];
}>> : never;
export declare type ApplyNotNullMapToJoins<TResult, TNullabilityMap extends Record<string, JoinNullability>> = {
    [TTableName in keyof TResult & keyof TNullabilityMap & string]: ApplyNullability<TResult[TTableName], TNullabilityMap[TTableName]>;
};
export declare type SelectResult<TResult, TSelectMode extends SelectMode, TJoinsNotNullable extends Record<string, JoinNullability>> = TSelectMode extends 'partial' ? SelectPartialResult<TResult, TJoinsNotNullable> : TSelectMode extends 'single' ? SelectResultFields<TResult> : ApplyNotNullMapToJoins<SelectResultFields<TResult>, TJoinsNotNullable>;
declare type IsUnion<T, U extends T = T> = (T extends any ? (U extends T ? false : true) : never) extends false ? false : true;
declare type Not<T extends boolean> = T extends true ? false : true;
declare type SelectPartialResult<TFields, TNullability extends Record<string, JoinNullability>> = TNullability extends TNullability ? {
    [Key in keyof TFields]: TFields[Key] extends infer TField ? TField extends AnyPgTable ? GetTableConfig<TField, 'name'> extends keyof TNullability ? ApplyNullability<SelectResultFields<GetTableConfig<TField, 'columns'>>, TNullability[GetTableConfig<TField, 'name'>]> : never : TField extends AnyPgColumn ? GetColumnConfig<TField, 'tableName'> extends infer TTableName extends keyof TNullability ? ApplyNullability<SelectResultField<TField>, TNullability[TTableName]> : never : TField extends SQL | SQL.Aliased ? SelectResultField<TField> : TField extends Record<string, any> ? TField[keyof TField] extends AnyPgColumn<{
        tableName: infer TTableName extends string;
    }> | SQL | SQL.Aliased ? Not<IsUnion<TTableName>> extends true ? ApplyNullability<SelectResultFields<TField>, TNullability[TTableName]> : SelectPartialResult<TField, TNullability> : never : never : never;
} : never;
export declare type AnyPgSelect = PgSelect<any, any, any, any>;
export declare type BuildAliasTable<TTable extends AnyPgTable, TAlias extends string> = GetTableConfig<TTable> extends infer TConfig extends TableConfig ? PgTableWithColumns<UpdateTableConfig<TConfig, {
    name: TAlias;
    columns: Simplify<MapColumnsToTableAlias<TConfig['columns'], TAlias>>;
}>> : never;
export declare type MapColumnsToTableAlias<TColumns extends Record<string, AnyPgColumn>, TAlias extends string> = {
    [Key in keyof TColumns]: ChangeColumnTableName<TColumns[Key], TAlias>;
};
export declare type BuildSubquerySelection<TSelection, TAlias extends string, TNullability extends Record<string, JoinNullability>> = {
    [Key in keyof TSelection]: TSelection[Key] extends SQL ? DrizzleTypeError<'You cannot reference this field without assigning it an alias first - use `.as(<alias>)`'> : TSelection[Key] extends SQL.Aliased ? TSelection[Key] : TSelection[Key] extends AnyPgColumn ? ChangeColumnTableName<ApplyNullabilityToColumn<TSelection[Key], TNullability[GetColumnConfig<TSelection[Key], 'tableName'>]>, TAlias> : TSelection[Key] extends Record<string, any> ? Simplify<BuildSubquerySelection<TSelection[Key], TAlias, TNullability>> : never;
};
export declare type AppendToResult<TTableName extends string, TResult, TJoinedName extends string, TSelectedFields extends SelectFields, TOldSelectMode extends SelectMode> = TOldSelectMode extends 'partial' ? TResult : TOldSelectMode extends 'single' ? Record<TTableName, TResult> & Record<TJoinedName, TSelectedFields> : TResult & Record<TJoinedName, TSelectedFields>;
declare type SetJoinsNullability<TNullabilityMap extends Record<string, JoinNullability>, TValue extends JoinNullability> = {
    [Key in keyof TNullabilityMap]: TValue;
};
export declare type AppendToJoinsNotNull<TJoinsNotNull extends Record<string, JoinNullability>, TJoinedName extends string, TJoinType extends JoinType> = 'left' extends TJoinType ? TJoinsNotNull & {
    [name in TJoinedName]: 'nullable';
} : 'right' extends TJoinType ? SetJoinsNullability<TJoinsNotNull, 'nullable'> & {
    [name in TJoinedName]: 'not-null';
} : 'inner' extends TJoinType ? TJoinsNotNull & {
    [name in TJoinedName]: 'not-null';
} : 'full' extends TJoinType ? SetJoinsNullability<TJoinsNotNull, 'nullable'> & {
    [name in TJoinedName]: 'nullable';
} : never;
export interface PgSelectConfig {
    withList: Subquery[];
    fields: SelectFields;
    fieldsList: SelectFieldsOrdered;
    where?: SQL;
    table: AnyPgTable | Subquery;
    limit?: number | Placeholder;
    offset?: number | Placeholder;
    joins: Record<string, JoinsValue>;
    orderBy: (AnyPgColumn | SQL)[];
    groupBy: (AnyPgColumn | SQL)[];
    lockingClauses: {
        strength: LockStrength;
        config: LockConfig;
    }[];
}
export declare type JoinFn<TTable extends AnyPgTable | Subquery, TSelectMode extends SelectMode, TJoinType extends JoinType, TResult, TJoinsNotNullable extends Record<string, JoinNullability> = Record<GetSelectTableName<TTable>, 'not-null'>> = <TJoinedTable extends AnyPgTable | Subquery, TJoinedName extends GetSelectTableName<TJoinedTable> = GetSelectTableName<TJoinedTable>>(table: TJoinedTable, on: SQL | undefined) => PgSelect<TTable, AppendToResult<GetSelectTableName<TTable>, TResult, TJoinedName, TJoinedTable extends AnyPgTable ? GetTableConfig<TJoinedTable, 'columns'> : TJoinedName extends Subquery ? Assume<GetSubquerySelection<TJoinedName>, SelectFields> : never, TSelectMode>, TSelectMode extends 'partial' ? TSelectMode : 'multiple', AppendToJoinsNotNull<TJoinsNotNullable, TJoinedName, TJoinType>>;
export declare type GetSelectTableName<TTable extends AnyPgTable | Subquery> = TTable extends AnyPgTable ? GetTableConfig<TTable, 'name'> : TTable extends Subquery ? GetSubqueryAlias<TTable> : never;
export declare type SelectFieldsFlat = SelectFieldsFlatBase<AnyPgColumn>;
export declare type SelectFields = SelectFieldsBase<AnyPgColumn, AnyPgTable>;
export declare type SelectFieldsOrdered = SelectFieldsOrderedBase<AnyPgColumn>;
export declare type SelectResultField<T> = T extends DrizzleTypeError<any> ? T : T extends AnyPgTable ? SelectResultField<GetTableConfig<T, 'columns'>> : T extends AnyPgColumn ? GetColumnData<T> : T extends SQL<infer T> | SQL.Aliased<infer T> ? T : T extends Record<string, any> ? SelectResultFields<T> : never;
export declare type SelectResultFields<TSelectedFields> = Simplify<{
    [Key in keyof TSelectedFields & string]: SelectResultField<TSelectedFields[Key]>;
}>;
export declare type LockStrength = 'update' | 'no key update' | 'share' | 'key share';
export declare type LockConfig = {
    of?: AnyPgTable;
} & ({
    noWait: true;
    skipLocked?: undefined;
} | {
    noWait?: undefined;
    skipLocked: true;
} | {
    noWait?: undefined;
    skipLocked?: undefined;
});
export {};
//# sourceMappingURL=select.types.d.ts.map