import { PgDialect } from './dialect';
import { PgDelete, PgInsertBuilder, PgSelectBuilder, PgUpdateBuilder } from './query-builders';
import { PgSession, QueryResultHKT, QueryResultKind } from './session';
import { AnyPgTable } from './table';
import { SQLWrapper } from '../sql';
import { WithSubquery } from '../subquery';
import { SelectFields } from './query-builders/select.types';
export declare class PgDatabase<TQueryResult extends QueryResultHKT, TSession extends PgSession> {
    constructor(
    /** @internal */
    dialect: PgDialect, 
    /** @internal */
    session: TSession);
    with(...queries: WithSubquery[]): {
        select: {
            (): PgSelectBuilder<undefined>;
            <TSelection extends SelectFields>(fields: TSelection): PgSelectBuilder<TSelection>;
        };
    };
    select(): PgSelectBuilder<undefined>;
    select<TSelection extends SelectFields>(fields: TSelection): PgSelectBuilder<TSelection>;
    update<TTable extends AnyPgTable>(table: TTable): PgUpdateBuilder<TTable, TQueryResult>;
    insert<TTable extends AnyPgTable>(table: TTable): PgInsertBuilder<TTable, TQueryResult>;
    delete<TTable extends AnyPgTable>(table: TTable): PgDelete<TTable, TQueryResult>;
    execute<TRow extends Record<string, unknown> = Record<string, unknown>>(query: SQLWrapper): Promise<QueryResultKind<TQueryResult, TRow>>;
}
//# sourceMappingURL=db.d.ts.map