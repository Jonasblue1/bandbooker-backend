import { UpdateCBConfig } from '../../column-builder';
import { AnyPgTable } from '../table';
import { SQL } from '../../sql';
import { Update } from '../../utils';
import { PgColumn, PgColumnBuilder } from './common';
export interface PgEnum<TValues extends [string, ...string[]]> {
    (name: string): PgEnumColumnBuilder<Update<PgEnumColumnBuilderConfig, {
        notNull: false;
        hasDefault: false;
        values: TValues;
    }>>;
    readonly enumName: string;
    readonly enumValues: TValues;
}
export declare function isPgEnum(obj: unknown): obj is PgEnum<[string, ...string[]]>;
export interface PgEnumColumnBuilderConfig {
    notNull: boolean;
    hasDefault: boolean;
    values: [string, ...string[]];
}
export interface PgEnumColumnConfig extends PgEnumColumnBuilderConfig {
    tableName: string;
}
export declare class PgEnumColumnBuilder<T extends PgEnumColumnBuilderConfig = PgEnumColumnBuilderConfig> extends PgColumnBuilder<{
    data: T['values'][number];
    driverParam: string;
    notNull: T['notNull'];
    hasDefault: T['hasDefault'];
}, {
    enumInstance: PgEnum<T['values']>;
}> {
    protected $pgColumnBuilderBrand: 'PgEnumColumnBuilder';
    constructor(name: string, enumInstance: PgEnum<T['values']>);
    notNull(): PgEnumColumnBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
    default(value: T['values'][number] | SQL): PgEnumColumnBuilder<UpdateCBConfig<T, {
        hasDefault: true;
    }>>;
    primaryKey(): PgEnumColumnBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
}
export declare class PgEnumColumn<T extends PgEnumColumnConfig> extends PgColumn<{
    tableName: T['tableName'];
    data: T['values'][number];
    driverParam: string;
    notNull: T['notNull'];
    hasDefault: T['hasDefault'];
}> {
    protected $pgColumnBrand: 'PgEnumColumn';
    readonly enum: PgEnum<T['values']>;
    constructor(table: AnyPgTable<{
        name: T['tableName'];
    }>, config: PgEnumColumnBuilder<Pick<T, keyof PgEnumColumnBuilderConfig>>['config']);
    getSQLType(): string;
}
export declare function pgEnum<U extends string, T extends Readonly<[U, ...U[]]>>(enumName: string, values: T): PgEnum<Writeable<T>>;
export declare type Writeable<T> = {
    -readonly [P in keyof T]: T[P];
};
//# sourceMappingURL=enum.d.ts.map