import { ColumnBuilderBaseConfig, UpdateCBConfig } from '../../column-builder';
import { SQL } from '../../sql';
import { PgColumnBuilder } from './common';
export declare abstract class PgDateColumnBaseBuilder<T extends ColumnBuilderBaseConfig, TConfig extends Record<string, unknown> = {}> extends PgColumnBuilder<T, TConfig> {
    notNull(): PgDateColumnBaseBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
    default(value: T['data'] | SQL): PgDateColumnBaseBuilder<UpdateCBConfig<T, {
        hasDefault: true;
    }>>;
    primaryKey(): PgDateColumnBaseBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
    defaultNow(): PgDateColumnBaseBuilder<import("../../utils").Simplify<Pick<T, Exclude<keyof T, "hasDefault">> & {
        hasDefault: true;
    }, {}>, {}>;
}
//# sourceMappingURL=date.common.d.ts.map