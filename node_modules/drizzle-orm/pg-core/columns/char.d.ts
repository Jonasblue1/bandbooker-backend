import { ColumnConfig } from '../../column';
import { ColumnBuilderConfig } from '../../column-builder';
import { AnyPgTable } from '../table';
import { PgColumn, PgColumnBuilder } from './common';
export declare class PgCharBuilder<TData extends string = string> extends PgColumnBuilder<ColumnBuilderConfig<{
    data: TData;
    driverParam: string;
}>, {
    length: number | undefined;
}> {
    protected $pgColumnBuilderBrand: 'PgCharBuilder';
    constructor(name: string, length?: number);
}
export declare class PgChar<TTableName extends string, TData extends string> extends PgColumn<ColumnConfig<{
    tableName: TTableName;
    data: TData;
    driverParam: string;
}>> {
    protected $pgColumnBrand: 'PgChar';
    length: number | undefined;
    constructor(table: AnyPgTable<{
        name: TTableName;
    }>, config: PgCharBuilder<TData>['config']);
    getSQLType(): string;
}
export declare function char<T extends string = string>(name: string, config?: {
    length?: number;
}): PgCharBuilder<T>;
//# sourceMappingURL=char.d.ts.map