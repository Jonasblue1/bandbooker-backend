import { Database, Statement } from 'sql.js';
import { Logger } from '../logger';
import { Query } from '../sql';
import { SQLiteSyncDialect } from '../sqlite-core/dialect';
import { SelectFieldsOrdered } from '../sqlite-core/query-builders/select.types';
import { PreparedQuery as PreparedQueryBase, PreparedQueryConfig as PreparedQueryConfigBase, SQLiteSession } from '../sqlite-core/session';
export interface SQLJsSessionOptions {
    logger?: Logger;
}
declare type PreparedQueryConfig = Omit<PreparedQueryConfigBase, 'statement' | 'run'>;
export declare class SQLJsSession extends SQLiteSession<'sync', void> {
    private client;
    private logger;
    constructor(client: Database, dialect: SQLiteSyncDialect, options?: SQLJsSessionOptions);
    exec(query: string): void;
    prepareQuery<T extends Omit<PreparedQueryConfig, 'run'>>(query: Query, fields?: SelectFieldsOrdered): PreparedQuery<T>;
    prepareOneTimeQuery<T extends Omit<PreparedQueryConfig, 'run'>>(query: Query, fields?: SelectFieldsOrdered): PreparedQuery<T>;
}
export declare class PreparedQuery<T extends PreparedQueryConfig = PreparedQueryConfig> extends PreparedQueryBase<{
    type: 'sync';
    run: void;
    all: T['all'];
    get: T['get'];
    values: T['values'];
}> {
    private stmt;
    private queryString;
    private params;
    private logger;
    private fields;
    private isOneTimeQuery;
    constructor(stmt: Statement, queryString: string, params: unknown[], logger: Logger, fields: SelectFieldsOrdered | undefined, isOneTimeQuery?: boolean);
    run(placeholderValues?: Record<string, unknown>): void;
    all(placeholderValues?: Record<string, unknown>): T['all'];
    get(placeholderValues?: Record<string, unknown>): T['get'];
    values(placeholderValues?: Record<string, unknown>): T['values'];
    free(): boolean;
}
export {};
//# sourceMappingURL=session.d.ts.map