import { MigrationMeta } from '../migrator';
import { Query, SQL } from '../sql';
import { UpdateSet } from '../utils';
import { MySqlDeleteConfig } from './query-builders/delete';
import { MySqlInsertConfig } from './query-builders/insert';
import { MySqlSelectConfig } from './query-builders/select.types';
import { MySqlUpdateConfig } from './query-builders/update';
import { MySqlSession } from './session';
import { AnyMySqlTable } from './table';
export declare class MySqlDialect {
    migrate(migrations: MigrationMeta[], session: MySqlSession): Promise<void>;
    escapeName(name: string): string;
    escapeParam(num: number): string;
    buildDeleteQuery({ table, where, returning }: MySqlDeleteConfig): SQL;
    buildUpdateSet(table: AnyMySqlTable, set: UpdateSet): SQL;
    buildUpdateQuery({ table, set, where, returning }: MySqlUpdateConfig): SQL;
    /**
     * Builds selection SQL with provided fields/expressions
     *
     * Examples:
     *
     * `select <selection> from`
     *
     * `insert ... returning <selection>`
     *
     * If `isSingleTable` is true, then columns won't be prefixed with table name
     */
    private buildSelection;
    buildSelectQuery({ withList, fieldsList: fields, where, table, joins, orderBy, groupBy, limit, offset, lockingClause }: MySqlSelectConfig): SQL;
    buildInsertQuery({ table, values, onConflict, returning }: MySqlInsertConfig): SQL;
    sqlToQuery(sql: SQL): Query;
}
//# sourceMappingURL=dialect.d.ts.map