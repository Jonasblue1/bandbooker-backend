import { ResultSetHeader } from 'mysql2/promise';
import { SQLWrapper } from '../sql';
import { WithSubquery } from '../subquery';
import { MySqlDialect } from './dialect';
import { MySqlDelete, MySqlInsertBuilder, MySqlSelectBuilder, MySqlUpdateBuilder } from './query-builders';
import { SelectFields } from './query-builders/select.types';
import { MySqlSession, QueryResultHKT, QueryResultKind } from './session';
import { AnyMySqlTable } from './table';
export declare class MySqlDatabase<TQueryResult extends QueryResultHKT, TSession extends MySqlSession> {
    constructor(
    /** @internal */
    dialect: MySqlDialect, 
    /** @internal */
    session: TSession);
    with(...queries: WithSubquery[]): {
        select: {
            (): MySqlSelectBuilder<undefined>;
            <TSelection extends SelectFields>(fields: TSelection): MySqlSelectBuilder<TSelection>;
        };
    };
    select(): MySqlSelectBuilder<undefined>;
    select<TSelection extends SelectFields>(fields: TSelection): MySqlSelectBuilder<TSelection>;
    update<TTable extends AnyMySqlTable>(table: TTable): MySqlUpdateBuilder<TTable, TQueryResult>;
    insert<TTable extends AnyMySqlTable>(table: TTable): MySqlInsertBuilder<TTable, TQueryResult>;
    delete<TTable extends AnyMySqlTable>(table: TTable): MySqlDelete<TTable, TQueryResult>;
    execute<T extends {
        [column: string]: any;
    } = ResultSetHeader>(query: SQLWrapper): Promise<QueryResultKind<TQueryResult, T>>;
}
//# sourceMappingURL=db.d.ts.map