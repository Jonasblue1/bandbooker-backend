import { AnyMySqlColumn } from '../columns/common';
import { MySqlDialect } from '../dialect';
import { MySqlSession, PreparedQuery, PreparedQueryConfig } from '../session';
import { AnyMySqlTable, GetTableConfig } from '../table';
import { QueryPromise } from '../../query-promise';
import { Query, SQL, SQLWrapper } from '../../sql';
import { GetSubquerySelection, Subquery, SubqueryWithSelection, WithSubqueryWithSelection } from '../../subquery';
import { Simplify } from '../../utils';
import { BuildSubquerySelection, GetSelectTableName, JoinFn, JoinNullability, JoinType, LockConfig, LockStrength, MySqlSelectConfig, SelectFields, SelectMode, SelectResult } from './select.types';
export declare class MySqlSelectBuilder<TSelection extends SelectFields | undefined> {
    private fields;
    private session;
    private dialect;
    private withList;
    constructor(fields: TSelection, session: MySqlSession, dialect: MySqlDialect, withList?: Subquery[]);
    from<TSubquery extends Subquery>(subquery: TSubquery): MySqlSelect<TSubquery, TSelection extends undefined ? GetSubquerySelection<TSubquery> : TSelection, TSelection extends undefined ? 'single' : 'partial'>;
    from<TTable extends AnyMySqlTable>(table: TTable): MySqlSelect<TTable, TSelection extends undefined ? GetTableConfig<TTable, 'columns'> : TSelection, TSelection extends undefined ? 'single' : 'partial'>;
}
export interface MySqlSelect<TTable extends AnyMySqlTable | Subquery, TSelection, TSelectMode extends SelectMode = 'single', TNullability extends Record<string, JoinNullability> = Record<GetSelectTableName<TTable>, 'not-null'>> extends QueryPromise<SelectResult<TSelection, TSelectMode, TNullability>[]>, SQLWrapper {
}
export declare class MySqlSelect<TTable extends AnyMySqlTable | Subquery, TSelection, TSelectMode extends SelectMode = 'single', TNullability extends Record<string, JoinNullability> = Record<GetSelectTableName<TTable>, 'not-null'>> extends QueryPromise<SelectResult<TSelection, TSelectMode, TNullability>[]> implements SQLWrapper {
    private isPartialSelect;
    private session;
    private dialect;
    protected $table: TTable;
    protected $selectMode: TSelectMode;
    protected $result: TSelection;
    private config;
    private joinsNotNullable;
    private tableName;
    constructor(table: MySqlSelectConfig['table'], fields: MySqlSelectConfig['fields'], fieldsList: MySqlSelectConfig['fieldsList'], isPartialSelect: boolean, session: MySqlSession, dialect: MySqlDialect, withList: Subquery[]);
    private createJoin;
    leftJoin: JoinFn<TTable, TSelectMode, "left", TSelection, TNullability>;
    rightJoin: JoinFn<TTable, TSelectMode, "right", TSelection, TNullability>;
    innerJoin: JoinFn<TTable, TSelectMode, "inner", TSelection, TNullability>;
    fullJoin: JoinFn<TTable, TSelectMode, "full", TSelection, TNullability>;
    where(where: SQL | undefined): Omit<this, 'where' | `${JoinType}Join`>;
    groupBy(...columns: (AnyMySqlColumn | SQL)[]): Omit<this, 'where' | `${JoinType}Join`>;
    orderBy(...columns: (AnyMySqlColumn | SQL)[]): Omit<this, 'where' | `${JoinType}Join` | 'orderBy'>;
    limit(limit: number): Omit<this, 'where' | `${JoinType}Join` | 'limit'>;
    offset(offset: number): Omit<this, 'where' | `${JoinType}Join` | 'offset'>;
    for(strength: LockStrength, config?: LockConfig): Omit<this, 'for'>;
    toSQL(): Omit<Query, 'typings'>;
    private _prepare;
    prepare(name: string): PreparedQuery<PreparedQueryConfig & {
        execute: SelectResult<TSelection, TSelectMode, TNullability>[];
    }>;
    execute: ReturnType<this['prepare']>['execute'];
    as<TAlias extends string>(alias: TAlias): SubqueryWithSelection<Simplify<BuildSubquerySelection<TSelection, TAlias, TNullability>>, TAlias>;
    prepareWithSubquery<TAlias extends string>(alias: TAlias): WithSubqueryWithSelection<Simplify<BuildSubquerySelection<TSelection, TAlias, TNullability>>, TAlias>;
}
//# sourceMappingURL=select.d.ts.map