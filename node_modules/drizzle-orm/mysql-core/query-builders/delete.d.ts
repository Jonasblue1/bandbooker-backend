import { MySqlDialect } from '../dialect';
import { MySqlSession, PreparedQuery, PreparedQueryConfig, QueryResultHKT, QueryResultKind } from '../session';
import { AnyMySqlTable } from '../table';
import { QueryPromise } from '../../query-promise';
import { Query, SQL, SQLWrapper } from '../../sql';
import { SelectFieldsOrdered } from './select.types';
export interface MySqlDeleteConfig {
    where?: SQL | undefined;
    table: AnyMySqlTable;
    returning?: SelectFieldsOrdered;
}
export interface MySqlDelete<TTable extends AnyMySqlTable, TQueryResult extends QueryResultHKT> extends QueryPromise<QueryResultKind<TQueryResult, never>> {
}
export declare class MySqlDelete<TTable extends AnyMySqlTable, TQueryResult extends QueryResultHKT> extends QueryPromise<QueryResultKind<TQueryResult, never>> implements SQLWrapper {
    private table;
    private session;
    private dialect;
    private config;
    constructor(table: TTable, session: MySqlSession, dialect: MySqlDialect);
    where(where: SQL | undefined): Omit<this, 'where'>;
    toSQL(): Omit<Query, 'typings'>;
    private _prepare;
    prepare(name: string): PreparedQuery<PreparedQueryConfig & {
        execute: QueryResultKind<TQueryResult, never>;
    }>;
    execute: ReturnType<this['prepare']>['execute'];
}
//# sourceMappingURL=delete.d.ts.map