"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTableChecks = exports.getTableForeignKeys = exports.getTableIndexes = exports.getTableColumns = exports.getTableConfig = exports.tableChecks = exports.tableForeignKeys = exports.tableIndexes = void 0;
const table_1 = require("../table");
const checks_1 = require("./checks");
const foreign_keys_1 = require("./foreign-keys");
const indexes_1 = require("./indexes");
const table_2 = require("./table");
/** @internal */
exports.tableIndexes = Symbol('tableIndexes');
/** @internal */
exports.tableForeignKeys = Symbol('tableForeignKeys');
/** @internal */
exports.tableChecks = Symbol('tableChecks');
function getTableConfig(table) {
    const columns = getTableColumns(table);
    const indexes = [];
    const checks = [];
    const foreignKeys = getTableForeignKeys(table);
    const name = table[table_1.Table.Symbol.Name];
    const schema = table[table_1.Table.Symbol.Schema];
    const extraConfig = table[table_2.MySqlTable.Symbol.ExtraConfig];
    if (typeof extraConfig === 'undefined') {
        return {
            columns,
            indexes,
            foreignKeys,
            checks,
            name,
            schema,
        };
    }
    const builtConfig = extraConfig(table[table_2.MySqlTable.Symbol.Columns]);
    Object.entries(builtConfig).forEach(([_, builder]) => {
        if (builder instanceof indexes_1.IndexBuilder) {
            indexes.push(builder.build(table));
        }
        else if (builder instanceof checks_1.CheckBuilder) {
            checks.push(builder.build(table));
        }
        else if (builder instanceof foreign_keys_1.ForeignKeyBuilder) {
            foreignKeys.push(builder.build(table));
        }
    });
    return {
        columns: getTableColumns(table),
        indexes,
        foreignKeys,
        checks,
        name,
        schema,
    };
}
exports.getTableConfig = getTableConfig;
function getTableColumns(table, config) {
    const columns = table[table_2.MySqlTable.Symbol.Columns];
    if ((config === null || config === void 0 ? void 0 : config.format) === 'object') {
        return Object.assign({}, columns);
    }
    return Object.values(columns);
}
exports.getTableColumns = getTableColumns;
function getTableIndexes(table) {
    const indexes = table[table_2.MySqlTable.Symbol.Indexes];
    const keys = Reflect.ownKeys(indexes);
    return keys.map((key) => indexes[key]);
}
exports.getTableIndexes = getTableIndexes;
function getTableForeignKeys(table) {
    const foreignKeys = table[table_2.MySqlTable.Symbol.ForeignKeys];
    const keys = Reflect.ownKeys(foreignKeys);
    return keys.map((key) => foreignKeys[key]);
}
exports.getTableForeignKeys = getTableForeignKeys;
function getTableChecks(table) {
    const checks = table[table_2.MySqlTable.Symbol.Checks];
    const keys = Reflect.ownKeys(checks);
    return keys.map((key) => checks[key]);
}
exports.getTableChecks = getTableChecks;
//# sourceMappingURL=utils.js.map