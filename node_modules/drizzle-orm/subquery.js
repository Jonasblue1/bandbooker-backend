"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubquerySelectionProxyHandler = exports.WithSubquery = exports.Subquery = exports.SubqueryConfig = void 0;
const alias_1 = require("./alias");
const column_1 = require("./column");
const sql_1 = require("./sql");
exports.SubqueryConfig = Symbol('SubqueryConfig');
class Subquery {
    constructor(sql, selection, alias, isWith = false) {
        this[exports.SubqueryConfig] = {
            sql,
            selection,
            alias,
            isWith,
        };
    }
}
exports.Subquery = Subquery;
class WithSubquery extends Subquery {
}
exports.WithSubquery = WithSubquery;
class SubquerySelectionProxyHandler {
    constructor(alias) {
        this.alias = alias;
    }
    get(subquery, prop, receiver) {
        if (typeof prop === 'symbol') {
            return subquery[prop];
        }
        const columns = subquery instanceof Subquery ? subquery[exports.SubqueryConfig].selection : subquery;
        const value = columns[prop];
        if (value instanceof sql_1.SQL.Aliased) {
            const newValue = value.clone();
            newValue.isSubquerySelectionField = true;
            return newValue;
        }
        if (value instanceof sql_1.SQL) {
            throw new Error(`You tried to reference "${prop}" field from a subquery, which is a raw SQL field, but it doesn't have an alias. Please add an alias to the field using ".as('alias')" method.`);
        }
        if (value instanceof column_1.Column) {
            return new Proxy(value, new alias_1.ColumnAliasProxyHandler(new Proxy(value.table, new alias_1.TableAliasProxyHandler(this.alias))));
        }
        if (typeof value !== 'object' || value === null) {
            return value;
        }
        return new Proxy(value, new SubquerySelectionProxyHandler(this.alias));
    }
}
exports.SubquerySelectionProxyHandler = SubquerySelectionProxyHandler;
//# sourceMappingURL=subquery.js.map