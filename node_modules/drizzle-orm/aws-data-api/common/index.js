"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toValueParam = exports.typingsToAwsTypeHint = exports.getValueFromDataApi = void 0;
const client_rds_data_1 = require("@aws-sdk/client-rds-data");
function getValueFromDataApi(row) {
    if (typeof row.stringValue !== 'undefined') {
        return row.stringValue;
    }
    else if (typeof row.booleanValue !== 'undefined') {
        return row.booleanValue;
    }
    else if (typeof row.doubleValue !== 'undefined') {
        return row.doubleValue;
    }
    else if (typeof row.isNull !== 'undefined') {
        return null;
    }
    else if (typeof row.longValue !== 'undefined') {
        return row.longValue;
    }
    else if (typeof row.blobValue !== 'undefined') {
        return row.blobValue;
    }
    else if (typeof row.arrayValue !== 'undefined') {
        if (typeof row.arrayValue.stringValues !== 'undefined') {
            return row.arrayValue.stringValues;
        }
        throw Error('Unknown array type');
    }
    else {
        throw Error('Unknown type');
    }
}
exports.getValueFromDataApi = getValueFromDataApi;
function typingsToAwsTypeHint(typings) {
    if (typings === 'date') {
        return client_rds_data_1.TypeHint.DATE;
    }
    else if (typings === 'decimal') {
        return client_rds_data_1.TypeHint.DECIMAL;
    }
    else if (typings === 'json') {
        return client_rds_data_1.TypeHint.JSON;
    }
    else if (typings === 'time') {
        return client_rds_data_1.TypeHint.TIME;
    }
    else if (typings === 'timestamp') {
        return client_rds_data_1.TypeHint.TIMESTAMP;
    }
    else if (typings === 'uuid') {
        return client_rds_data_1.TypeHint.UUID;
    }
    else {
        return undefined;
    }
}
exports.typingsToAwsTypeHint = typingsToAwsTypeHint;
function toValueParam(value, typings) {
    let response = {
        value: {},
        typeHint: typingsToAwsTypeHint(typings),
    };
    if (value === null) {
        response.value = { isNull: true };
    }
    else if (typeof value === 'string') {
        if (response.typeHint === 'DATE') {
            response.value = { stringValue: value.split('T')[0] };
        }
        else {
            response.value = { stringValue: value };
        }
    }
    else if (typeof value === 'number' && Number.isInteger(value)) {
        response.value = { longValue: value };
    }
    else if (typeof value === 'number' && !Number.isInteger(value)) {
        response.value = { doubleValue: value };
    }
    else if (typeof value === 'boolean') {
        response.value = { booleanValue: value };
    }
    else if (value instanceof Date) {
        response.value = { stringValue: value.toISOString().replace('T', ' ').replace('Z', '') };
    }
    else {
        throw Error(`Unknown type for ${value}`);
    }
    return response;
}
exports.toValueParam = toValueParam;
//# sourceMappingURL=index.js.map