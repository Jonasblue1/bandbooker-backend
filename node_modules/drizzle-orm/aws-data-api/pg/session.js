"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsDataApiSession = exports.AwsDataApiPreparedQuery = void 0;
const client_rds_data_1 = require("@aws-sdk/client-rds-data");
const pg_core_1 = require("../../pg-core");
const sql_1 = require("../../sql");
const utils_1 = require("../../utils");
const common_1 = require("../common");
class AwsDataApiPreparedQuery extends pg_core_1.PreparedQuery {
    constructor(client, queryString, params, typings, options, fields, name, transactionId) {
        super();
        this.client = client;
        this.params = params;
        this.typings = typings;
        this.options = options;
        this.fields = fields;
        this.rawQuery = new client_rds_data_1.ExecuteStatementCommand({
            sql: queryString,
            parameters: [],
            secretArn: options.secretArn,
            resourceArn: options.resourceArn,
            database: options.database,
            transactionId,
        });
    }
    execute(placeholderValues = {}) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues);
            this.rawQuery.input.parameters = params.map((param, index) => (Object.assign({ name: `${index + 1}` }, (0, common_1.toValueParam)(param, this.typings[index]))));
            (_a = this.options.logger) === null || _a === void 0 ? void 0 : _a.logQuery(this.rawQuery.input.sql, this.rawQuery.input.parameters);
            const { fields } = this;
            if (!fields) {
                return yield this.client.send(this.rawQuery);
            }
            const result = yield this.client.send(this.rawQuery);
            return (_b = result.records) === null || _b === void 0 ? void 0 : _b.map((result) => {
                const mappedResult = result.map((res) => (0, common_1.getValueFromDataApi)(res));
                return (0, utils_1.mapResultRow)(fields, mappedResult, this.joinsNotNullableMap);
            });
        });
    }
    all(placeholderValues) {
        throw new Error('Method not implemented.');
    }
    values(placeholderValues) {
        throw new Error('Method not implemented.');
    }
}
exports.AwsDataApiPreparedQuery = AwsDataApiPreparedQuery;
class AwsDataApiSession extends pg_core_1.PgSession {
    constructor(client, dialect, options) {
        super(dialect);
        this.client = client;
        this.options = options;
        this.rawQuery = {
            secretArn: options.secretArn,
            resourceArn: options.resourceArn,
            database: options.database,
        };
    }
    prepareQuery(query, fields, name) {
        var _a;
        return new AwsDataApiPreparedQuery(this.client, query.sql, query.params, (_a = query.typings) !== null && _a !== void 0 ? _a : [], this.options, fields, name, undefined);
    }
    prepareQueryWithTransaction(query, fields, name, transactionId) {
        var _a;
        return new AwsDataApiPreparedQuery(this.client, query.sql, query.params, (_a = query.typings) !== null && _a !== void 0 ? _a : [], this.options, fields, name, transactionId);
    }
    executeWithTransaction(query, transactionId) {
        return this.prepareQueryWithTransaction(this.dialect.sqlToQuery(query), undefined, undefined, transactionId).execute();
    }
    execute(query) {
        return this.prepareQuery(this.dialect.sqlToQuery(query), undefined, undefined).execute();
    }
    beginTransaction() {
        return __awaiter(this, void 0, void 0, function* () {
            const transactionRes = yield this.client.send(new client_rds_data_1.BeginTransactionCommand(this.rawQuery));
            return transactionRes.transactionId;
        });
    }
    commitTransaction(transactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.send(new client_rds_data_1.CommitTransactionCommand(Object.assign(Object.assign({}, this.rawQuery), { transactionId })));
        });
    }
    rollbackTransaction(transactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.send(new client_rds_data_1.RollbackTransactionCommand(Object.assign(Object.assign({}, this.rawQuery), { transactionId })));
        });
    }
}
exports.AwsDataApiSession = AwsDataApiSession;
//# sourceMappingURL=session.js.map