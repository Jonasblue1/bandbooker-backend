import { ExecuteStatementCommandOutput, RDSDataClient } from '@aws-sdk/client-rds-data';
import { Logger } from '../../logger';
import { PgDialect, PgSession, PreparedQuery, PreparedQueryConfig, QueryResultHKT } from '../../pg-core';
import { SelectFieldsOrdered } from '../../pg-core/query-builders/select.types';
import { Query, QueryTypingsValue, SQL } from '../../sql';
export declare type AwsDataApiClient = RDSDataClient;
export declare class AwsDataApiPreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private params;
    private typings;
    private options;
    private fields;
    private rawQuery;
    constructor(client: AwsDataApiClient, queryString: string, params: unknown[], typings: QueryTypingsValue[], options: AwsDataApiSessionOptions, fields: SelectFieldsOrdered | undefined, name: string | undefined, transactionId: string | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    all(placeholderValues?: Record<string, unknown> | undefined): Promise<T['all']>;
    values(placeholderValues?: Record<string, unknown> | undefined): Promise<T['values']>;
}
export interface AwsDataApiSessionOptions {
    logger?: Logger;
    database: string;
    resourceArn: string;
    secretArn: string;
}
export declare class AwsDataApiSession extends PgSession {
    private client;
    private options;
    private rawQuery;
    constructor(client: AwsDataApiClient, dialect: PgDialect, options: AwsDataApiSessionOptions);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectFieldsOrdered | undefined, name: string | undefined): PreparedQuery<T>;
    prepareQueryWithTransaction<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectFieldsOrdered | undefined, name: string | undefined, transactionId: string | undefined): PreparedQuery<T>;
    executeWithTransaction<T>(query: SQL, transactionId: string | undefined): Promise<T>;
    execute<T>(query: SQL): Promise<T>;
    beginTransaction(): Promise<string | undefined>;
    commitTransaction(transactionId: string): Promise<void>;
    rollbackTransaction(transactionId: string): Promise<void>;
}
export interface AwsDataApiPgQueryResultHKT extends QueryResultHKT {
    type: ExecuteStatementCommandOutput;
}
//# sourceMappingURL=session.d.ts.map