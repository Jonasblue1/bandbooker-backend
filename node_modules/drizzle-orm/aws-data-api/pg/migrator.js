"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrate = void 0;
const migrator_1 = require("../../migrator");
const sql_1 = require("../../sql");
function migrate(db, config) {
    var e_1, _a;
    return __awaiter(this, void 0, void 0, function* () {
        const migrations = (0, migrator_1.readMigrationFiles)(config);
        // TODO: Write own aws datapi migrator
        const { session } = db;
        const migrationTableCreate = (0, sql_1.sql) `CREATE TABLE IF NOT EXISTS "drizzle"."__drizzle_migrations" (
		id SERIAL PRIMARY KEY,
		hash text NOT NULL,
		created_at bigint
	)`;
        yield session.execute((0, sql_1.sql) `CREATE SCHEMA IF NOT EXISTS "drizzle"`);
        yield session.execute(migrationTableCreate);
        const dbMigrations = yield session.execute((0, sql_1.sql) `SELECT id, hash, created_at FROM "drizzle"."__drizzle_migrations" ORDER BY created_at DESC LIMIT 1`);
        const lastDbMigration = dbMigrations[0];
        const transactionId = yield session.beginTransaction();
        try {
            try {
                for (var migrations_1 = __asyncValues(migrations), migrations_1_1; migrations_1_1 = yield migrations_1.next(), !migrations_1_1.done;) {
                    const migration = migrations_1_1.value;
                    if (!lastDbMigration
                        || parseInt(lastDbMigration.created_at, 10) < migration.folderMillis) {
                        yield session.executeWithTransaction(sql_1.sql.raw(migration.sql), transactionId);
                        yield session.executeWithTransaction((0, sql_1.sql) `INSERT INTO "drizzle"."__drizzle_migrations" ("hash", "created_at") VALUES(${migration.hash}, ${migration.folderMillis})`, transactionId);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (migrations_1_1 && !migrations_1_1.done && (_a = migrations_1.return)) yield _a.call(migrations_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            yield session.commitTransaction(transactionId);
        }
        catch (e) {
            yield session.rollbackTransaction(transactionId);
            throw e;
        }
    });
}
exports.migrate = migrate;
//# sourceMappingURL=migrator.js.map