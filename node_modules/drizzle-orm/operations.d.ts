import { AnyColumn } from './column';
import { SQL } from './sql';
import { Table } from './table';
export declare type RequiredKeyOnly<TKey extends string, T extends AnyColumn> = T extends AnyColumn<{
    notNull: true;
    hasDefault: false;
}> ? TKey : never;
export declare type OptionalKeyOnly<TKey extends string, T extends AnyColumn> = TKey extends RequiredKeyOnly<TKey, T> ? never : TKey;
export declare type SelectFieldsFlat<TColumn extends AnyColumn> = Record<string, TColumn | SQL | SQL.Aliased>;
export declare type SelectFields<TColumn extends AnyColumn, TTable extends Table> = Record<string, SelectFieldsFlat<TColumn>[string] | TTable | SelectFieldsFlat<TColumn>>;
export declare type SelectFieldsOrdered<TColumn extends AnyColumn> = {
    path: string[];
    field: TColumn | SQL | SQL.Aliased;
}[];
//# sourceMappingURL=operations.d.ts.map