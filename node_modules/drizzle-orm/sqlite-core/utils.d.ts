import { Check } from './checks';
import { AnySQLiteColumn } from './columns';
import { ForeignKey } from './foreign-keys';
import { Index } from './indexes';
import { PrimaryKey } from './primary-keys';
import { AnySQLiteTable, GetTableConfig } from './table';
export interface GetTableColumnsConfig<TFormat extends 'object' | 'array' = 'object' | 'array'> {
    format: TFormat;
}
export declare function getTableColumns<TTable extends AnySQLiteTable>(table: TTable, config: GetTableColumnsConfig<'object'>): Record<string, AnySQLiteColumn<{
    tableName: GetTableConfig<TTable, 'name'>;
}>>;
export declare function getTableColumns<TTable extends AnySQLiteTable>(table: TTable, config?: GetTableColumnsConfig<'array'>): AnySQLiteColumn<{
    tableName: GetTableConfig<TTable, 'name'>;
}>[];
export declare function getTableIndexes<TTable extends AnySQLiteTable>(table: TTable): Index[];
export declare function getTableForeignKeys<TTable extends AnySQLiteTable>(table: TTable): ForeignKey[];
export declare function getTableCompositePrimaryKeys<TTable extends AnySQLiteTable>(table: TTable): PrimaryKey[];
export declare function getTableChecks<TTable extends AnySQLiteTable>(table: TTable): Check[];
export declare type OnConflict = 'rollback' | 'abort' | 'fail' | 'ignore' | 'replace';
//# sourceMappingURL=utils.d.ts.map