import { GetColumnData } from '../../column';
import { Query, SQL, SQLWrapper } from '../../sql';
import { SQLiteDialect } from '../dialect';
import { PreparedQuery, SQLiteSession } from '../session';
import { AnySQLiteTable, GetTableConfig, InferModel } from '../table';
import { Simplify, UpdateSet } from '../../utils';
import { SelectFields, SelectFieldsOrdered, SelectResultFields } from './select.types';
export interface SQLiteUpdateConfig {
    where?: SQL | undefined;
    set: UpdateSet;
    table: AnySQLiteTable;
    returning?: SelectFieldsOrdered;
}
export declare type SQLiteUpdateSetSource<TTable extends AnySQLiteTable> = Simplify<{
    [Key in keyof GetTableConfig<TTable, 'columns'>]?: GetColumnData<GetTableConfig<TTable, 'columns'>[Key], 'query'> | SQL;
}>;
export declare class SQLiteUpdateBuilder<TTable extends AnySQLiteTable, TResultType extends 'sync' | 'async', TRunResult> {
    protected table: TTable;
    protected session: SQLiteSession;
    protected dialect: SQLiteDialect;
    protected $table: TTable;
    constructor(table: TTable, session: SQLiteSession, dialect: SQLiteDialect);
    set(values: SQLiteUpdateSetSource<TTable>): SQLiteUpdate<TTable, TResultType, TRunResult>;
}
export interface SQLiteUpdate<TTable extends AnySQLiteTable, TResultType extends 'sync' | 'async', TRunResult, TReturning = undefined> extends SQLWrapper {
}
export declare class SQLiteUpdate<TTable extends AnySQLiteTable, TResultType extends 'sync' | 'async', TRunResult, TReturning = undefined> implements SQLWrapper {
    private session;
    private dialect;
    protected $table: TTable;
    private config;
    constructor(table: TTable, set: UpdateSet, session: SQLiteSession, dialect: SQLiteDialect);
    where(where: SQL | undefined): Omit<this, 'where'>;
    returning(): Omit<SQLiteUpdate<TTable, TResultType, TRunResult, InferModel<TTable>>, 'where' | 'returning'>;
    returning<TSelectedFields extends SelectFields>(fields: TSelectedFields): Omit<SQLiteUpdate<TTable, TResultType, TRunResult, SelectResultFields<TSelectedFields>>, 'where' | 'returning'>;
    toSQL(): Omit<Query, 'typings'>;
    prepare(): PreparedQuery<{
        type: TResultType;
        run: TRunResult;
        all: TReturning extends undefined ? never : TReturning[];
        get: TReturning extends undefined ? never : TReturning;
        values: TReturning extends undefined ? never : any[][];
    }>;
    run: ReturnType<this['prepare']>['run'];
    all: ReturnType<this['prepare']>['all'];
    get: ReturnType<this['prepare']>['get'];
    values: ReturnType<this['prepare']>['values'];
}
//# sourceMappingURL=update.d.ts.map