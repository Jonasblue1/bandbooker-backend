import { Placeholder, Query, SQL, SQLWrapper } from '../../sql';
import { AnySQLiteColumn } from '../columns';
import { SQLiteDialect } from '../dialect';
import { PreparedQuery, SQLiteSession } from '../session';
import { AnySQLiteTable, GetTableConfig } from '../table';
import { GetSubquerySelection, Subquery, SubqueryWithSelection, WithSubqueryWithSelection } from '../../subquery';
import { Simplify } from '../../utils';
import { BuildSubquerySelection, GetSelectTableName, JoinFn, JoinNullability, JoinType, SelectFields, SelectMode, SelectResult, SQLiteSelectConfig } from './select.types';
export declare class SQLiteSelectBuilder<TSelection extends SelectFields | undefined, TResultType extends 'sync' | 'async', TRunResult> {
    private fields;
    private session;
    private dialect;
    private withList;
    constructor(fields: TSelection, session: SQLiteSession, dialect: SQLiteDialect, withList?: Subquery[]);
    from<TSubquery extends Subquery>(subquery: TSubquery): SQLiteSelect<TSubquery, TResultType, TRunResult, TSelection extends undefined ? GetSubquerySelection<TSubquery> : TSelection, TSelection extends undefined ? 'single' : 'partial'>;
    from<TTable extends AnySQLiteTable>(table: TTable): SQLiteSelect<TTable, TResultType, TRunResult, TSelection extends undefined ? GetTableConfig<TTable, 'columns'> : TSelection, TSelection extends undefined ? 'single' : 'partial'>;
}
export interface SQLiteSelect<TTable extends AnySQLiteTable | Subquery, TResultType extends 'sync' | 'async', TRunResult, TSelection, TSelectMode extends SelectMode = 'single', TNullability extends Record<string, JoinNullability> = Record<GetSelectTableName<TTable>, 'not-null'>> extends SQLWrapper {
}
export declare class SQLiteSelect<TTable extends AnySQLiteTable | Subquery, TResultType extends 'sync' | 'async', TRunResult, TSelection, TSelectMode extends SelectMode = 'single', TNullability extends Record<string, JoinNullability> = Record<GetSelectTableName<TTable>, 'not-null'>> implements SQLWrapper {
    private isPartialSelect;
    private session;
    private dialect;
    private withList;
    protected $table: TTable;
    protected $selectMode: TSelectMode;
    protected $result: TSelection;
    private config;
    private joinsNotNullable;
    private tableName;
    constructor(table: SQLiteSelectConfig['table'], fields: SQLiteSelectConfig['fields'], fieldsList: SQLiteSelectConfig['fieldsList'], isPartialSelect: boolean, session: SQLiteSession, dialect: SQLiteDialect, withList: Subquery[]);
    private createJoin;
    leftJoin: JoinFn<TTable, TResultType, TRunResult, TSelectMode, "left", TSelection, TNullability>;
    rightJoin: JoinFn<TTable, TResultType, TRunResult, TSelectMode, "right", TSelection, TNullability>;
    innerJoin: JoinFn<TTable, TResultType, TRunResult, TSelectMode, "inner", TSelection, TNullability>;
    fullJoin: JoinFn<TTable, TResultType, TRunResult, TSelectMode, "full", TSelection, TNullability>;
    where(where: SQL | undefined): Omit<this, 'where' | `${JoinType}Join`>;
    orderBy(...columns: (AnySQLiteColumn | SQL)[]): Omit<this, 'where' | `${JoinType}Join` | 'orderBy'>;
    groupBy(...columns: (AnySQLiteColumn | SQL)[]): Omit<this, 'where' | `${JoinType}Join`>;
    limit(limit: number | Placeholder): Omit<this, 'where' | `${JoinType}Join` | 'limit'>;
    offset(offset: number | Placeholder): Omit<this, 'where' | `${JoinType}Join` | 'offset'>;
    toSQL(): Omit<Query, 'typings'>;
    prepare(): PreparedQuery<{
        type: TResultType;
        run: TRunResult;
        all: SelectResult<TSelection, TSelectMode, TNullability>[];
        get: SelectResult<TSelection, TSelectMode, TNullability>;
        values: any[][];
    }>;
    run: ReturnType<this['prepare']>['run'];
    all: ReturnType<this['prepare']>['all'];
    get: ReturnType<this['prepare']>['get'];
    values: ReturnType<this['prepare']>['values'];
    as<TAlias extends string>(alias: TAlias): SubqueryWithSelection<Simplify<BuildSubquerySelection<TSelection, TAlias, TNullability>>, TAlias>;
    prepareWithSubquery<TAlias extends string>(alias: TAlias): WithSubqueryWithSelection<Simplify<BuildSubquerySelection<TSelection, TAlias, TNullability>>, TAlias>;
}
//# sourceMappingURL=select.d.ts.map