"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SQLiteInsert = exports.SQLiteInsertBuilder = void 0;
const sql_1 = require("../../sql");
const table_1 = require("../table");
const table_2 = require("../../table");
const utils_1 = require("../../utils");
class SQLiteInsertBuilder {
    constructor(table, session, dialect) {
        this.table = table;
        this.session = session;
        this.dialect = dialect;
    }
    mapValues(values) {
        return values.map((entry) => {
            const result = {};
            const cols = this.table[table_2.Table.Symbol.Columns];
            for (const colKey of Object.keys(entry)) {
                const colValue = entry[colKey];
                if (colValue instanceof sql_1.SQL) {
                    result[colKey] = colValue;
                }
                else {
                    result[colKey] = new sql_1.Param(colValue, cols[colKey]);
                }
            }
            return result;
        });
    }
    values(...values) {
        return new SQLiteInsert(this.table, this.mapValues(values), this.session, this.dialect);
    }
}
exports.SQLiteInsertBuilder = SQLiteInsertBuilder;
class SQLiteInsert {
    constructor(table, values, session, dialect) {
        this.session = session;
        this.dialect = dialect;
        this.run = (placeholderValues) => {
            return this.prepare().run(placeholderValues);
        };
        this.all = (placeholderValues) => {
            return this.prepare().all(placeholderValues);
        };
        this.get = (placeholderValues) => {
            return this.prepare().get(placeholderValues);
        };
        this.values = (placeholderValues) => {
            return this.prepare().values(placeholderValues);
        };
        this.config = { table, values };
    }
    returning(fields = this.config.table[table_1.SQLiteTable.Symbol.Columns]) {
        this.config.returning = (0, utils_1.orderSelectedFields)(fields);
        return this;
    }
    onConflictDoNothing(config = {}) {
        if (config.target === undefined) {
            this.config.onConflict = (0, sql_1.sql) `do nothing`;
        }
        else {
            const whereSql = config.where ? (0, sql_1.sql) ` where ${config.where}` : (0, sql_1.sql) ``;
            this.config.onConflict = (0, sql_1.sql) `${config.target}${whereSql} do nothing`;
        }
        return this;
    }
    onConflictDoUpdate(config) {
        const whereSql = config.where ? (0, sql_1.sql) ` where ${config.where}` : (0, sql_1.sql) ``;
        const setSql = this.dialect.buildUpdateSet(this.config.table, (0, utils_1.mapUpdateSet)(this.config.table, config.set));
        this.config.onConflict = (0, sql_1.sql) `${config.target}${whereSql} do update set ${setSql}`;
        return this;
    }
    /** @internal */
    getSQL() {
        return this.dialect.buildInsertQuery(this.config);
    }
    toSQL() {
        const _a = this.dialect.sqlToQuery(this.getSQL()), { typings } = _a, rest = __rest(_a, ["typings"]);
        return rest;
    }
    prepare() {
        return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning);
    }
}
exports.SQLiteInsert = SQLiteInsert;
//# sourceMappingURL=insert.js.map