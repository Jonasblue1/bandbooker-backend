"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreparedQuery = exports.SQLiteRemoteSession = void 0;
const logger_1 = require("../logger");
const sql_1 = require("../sql");
const session_1 = require("../sqlite-core/session");
const utils_1 = require("../utils");
class SQLiteRemoteSession extends session_1.SQLiteSession {
    constructor(client, dialect, options = {}) {
        var _a;
        super(dialect);
        this.client = client;
        this.logger = (_a = options.logger) !== null && _a !== void 0 ? _a : new logger_1.NoopLogger();
    }
    exec(query) {
        throw Error('To implement: Proxy SQLite');
        // await this.client.exec(query.sql);
        // return this.client(this.queryString, params).then(({ rows }) => rows!)
    }
    prepareQuery(query, fields) {
        return new PreparedQuery(this.client, query.sql, query.params, this.logger, fields);
    }
}
exports.SQLiteRemoteSession = SQLiteRemoteSession;
class PreparedQuery extends session_1.PreparedQuery {
    constructor(client, queryString, params, logger, fields) {
        super();
        this.client = client;
        this.queryString = queryString;
        this.params = params;
        this.logger = logger;
        this.fields = fields;
    }
    run(placeholderValues) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues !== null && placeholderValues !== void 0 ? placeholderValues : {});
            this.logger.logQuery(this.queryString, params);
            return yield this.client(this.queryString, params, 'run');
        });
    }
    all(placeholderValues) {
        return __awaiter(this, void 0, void 0, function* () {
            const { fields } = this;
            const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues !== null && placeholderValues !== void 0 ? placeholderValues : {});
            this.logger.logQuery(this.queryString, params);
            const clientResult = this.client(this.queryString, params, 'all');
            if (fields) {
                return clientResult.then((values) => values.rows.map((row) => (0, utils_1.mapResultRow)(fields, row, this.joinsNotNullableMap)));
            }
            return this.client(this.queryString, params, 'all').then(({ rows }) => rows);
        });
    }
    get(placeholderValues) {
        return __awaiter(this, void 0, void 0, function* () {
            const { fields } = this;
            const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues !== null && placeholderValues !== void 0 ? placeholderValues : {});
            this.logger.logQuery(this.queryString, params);
            const clientResult = yield this.client(this.queryString, params, 'get');
            if (fields) {
                if (typeof clientResult.rows === 'undefined') {
                    return (0, utils_1.mapResultRow)(fields, [], this.joinsNotNullableMap);
                }
                return (0, utils_1.mapResultRow)(fields, clientResult.rows, this.joinsNotNullableMap);
            }
            return clientResult.rows;
        });
    }
    values(placeholderValues) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues !== null && placeholderValues !== void 0 ? placeholderValues : {});
            this.logger.logQuery(this.queryString, params);
            const clientResult = yield this.client(this.queryString, params, 'values');
            return clientResult.rows;
        });
    }
}
exports.PreparedQuery = PreparedQuery;
//# sourceMappingURL=session.js.map