import { Logger } from '../logger';
import { Query } from '../sql';
import { SQLiteAsyncDialect } from '../sqlite-core/dialect';
import { SelectFieldsOrdered } from '../sqlite-core/query-builders/select.types';
import { PreparedQuery as PreparedQueryBase, PreparedQueryConfig as PreparedQueryConfigBase, SQLiteSession } from '../sqlite-core/session';
import { RemoteCallback, SqliteRemoteResult } from './driver';
export interface SQLiteRemoteSessionOptions {
    logger?: Logger;
}
declare type PreparedQueryConfig = Omit<PreparedQueryConfigBase, 'statement' | 'run'>;
export declare class SQLiteRemoteSession extends SQLiteSession<'async', SqliteRemoteResult> {
    private client;
    private logger;
    constructor(client: RemoteCallback, dialect: SQLiteAsyncDialect, options?: SQLiteRemoteSessionOptions);
    exec(query: string): void;
    prepareQuery<T extends Omit<PreparedQueryConfig, 'run'>>(query: Query, fields?: SelectFieldsOrdered): PreparedQuery<T>;
}
export declare class PreparedQuery<T extends PreparedQueryConfig = PreparedQueryConfig> extends PreparedQueryBase<{
    type: 'async';
    run: SqliteRemoteResult;
    all: T['all'];
    get: T['get'];
    values: T['values'];
}> {
    private client;
    private queryString;
    private params;
    private logger;
    private fields;
    constructor(client: RemoteCallback, queryString: string, params: unknown[], logger: Logger, fields: SelectFieldsOrdered | undefined);
    run(placeholderValues?: Record<string, unknown>): Promise<SqliteRemoteResult>;
    all(placeholderValues?: Record<string, unknown>): Promise<T['all']>;
    get(placeholderValues?: Record<string, unknown>): Promise<T['get']>;
    values<T extends any[] = unknown[]>(placeholderValues?: Record<string, unknown>): Promise<T[]>;
}
export {};
//# sourceMappingURL=session.d.ts.map