"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrate = void 0;
const migrator_1 = require("../migrator");
const sql_1 = require("../sql");
function migrate(db, callback, config) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const migrations = (0, migrator_1.readMigrationFiles)(config);
        const migrationTableCreate = (0, sql_1.sql) `CREATE TABLE IF NOT EXISTS "__drizzle_migrations" (
		id SERIAL PRIMARY KEY,
		hash text NOT NULL,
		created_at numeric
	)`;
        yield db.run(migrationTableCreate);
        const dbMigrations = yield db.values((0, sql_1.sql) `SELECT id, hash, created_at FROM "__drizzle_migrations" ORDER BY created_at DESC LIMIT 1`);
        const lastDbMigration = (_a = dbMigrations[0]) !== null && _a !== void 0 ? _a : undefined;
        try {
            const queriesToRun = [];
            for (const migration of migrations) {
                if (!lastDbMigration || parseInt(lastDbMigration[2], 10) < migration.folderMillis) {
                    queriesToRun.push(migration.sql);
                    queriesToRun.push(`INSERT INTO "__drizzle_migrations" ("hash", "created_at") VALUES('${migration.hash}', '${migration.folderMillis}')`);
                }
            }
            yield callback(queriesToRun);
        }
        catch (e) {
            throw e;
        }
    });
}
exports.migrate = migrate;
//# sourceMappingURL=migrator.js.map