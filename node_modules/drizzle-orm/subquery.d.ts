import { AnyColumn } from './column';
import { SelectFields } from './operations';
import { SQL } from './sql';
import { Table } from './table';
export declare const SubqueryConfig: unique symbol;
export declare class Subquery<TSelection = unknown, TAlias extends string = string> {
    protected $brand: 'Subquery';
    protected $selection: TSelection;
    protected $alias: TAlias;
    constructor(sql: SQL, selection: SelectFields<AnyColumn, Table>, alias: string, isWith?: boolean);
}
export declare type SubqueryWithSelection<TSelection, TAlias extends string> = Subquery<TSelection, TAlias> & TSelection;
export declare class WithSubquery<TSelection = unknown, TAlias extends string = string> extends Subquery<TSelection, TAlias> {
    protected $subqueryBrand: 'WithSubquery';
}
export declare type WithSubqueryWithSelection<TSelection, TAlias extends string> = WithSubquery<TSelection, TAlias> & TSelection;
export declare type GetSubquerySelection<T extends Subquery> = T extends Subquery<infer TSelection> ? TSelection : never;
export declare type GetSubqueryAlias<T extends Subquery> = T extends Subquery<any, infer TAlias> ? TAlias : never;
export declare class SubquerySelectionProxyHandler<T extends Subquery | SelectFields<AnyColumn, Table>> implements ProxyHandler<Subquery | SelectFields<AnyColumn, Table>> {
    private alias;
    constructor(alias: string);
    get(subquery: T, prop: string | symbol, receiver: any): any;
}
//# sourceMappingURL=subquery.d.ts.map